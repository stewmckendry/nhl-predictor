- type: bug
  scope: framework
  task_id: null
  issue_id: 20160501-001
  title: Memory add fails silently if file not present in GitHub
  detail: When using /memory/manage with action=add, the tool returns 200 OK even
    if the target file does not exist in GitHub, leading to downstream failures (update/remove
    fail due to missing entry).
  suggested_fix: Ensure /memory/manage validates file exists on GitHub before returning
    200 OK; fixed by enforcing file check + improved error message.
  tags:
  - memory
  - validation
  - error-handling
  status: closed
  timestamp: '2025-05-02T04:22:44.695866'
- type: bug
  scope: framework
  task_id: null
  issue_id: 20160501-002
  title: Memory index returns misleading message
  detail: /memory/manage with action=index reports 'Memory indexed with X entries'
    regardless of change. In our case, it said 38 entries even though no files existed
    in the specified path.
  suggested_fix: Revised /memory/manage index response to return total and new entries;
    clarified background execution; fixed misleading success message.
  tags:
  - memory
  - usability
  - indexing
  status: closed
  timestamp: '2025-05-02T04:22:50.591529'
- type: bug
  scope: framework
  issue_id: 9f6fd23d-32eb-488f-bf99-cb04a749eebc
  task_id: null
  title: Missing task_id when creating new task
  detail: When using /tasks/lifecycle with action=create, the returned payload did
    not include a task_id if none was explicitly passed. This prevented follow-on
    lifecycle actions. Issue fixed by generating an ID if not provided.
  suggested_fix: Auto-generate a task_id if none is passed during create. Patch now
    ensures task_id is returned.
  tags:
  - task
  - lifecycle
  - id-generation
  status: closed
  timestamp: '2025-05-02T10:42:42.586228'
- type: bug
  scope: framework
  issue_id: f4364dd9-727b-4985-a0a8-f9436de137b1
  task_id: null
  title: Reopen task fails if pod_owner not passed
  detail: 'Calling /tasks/lifecycle with action=reopen on a completed task failed
    with error ''detail: pod_owner''. This occurred even though pod_owner was set
    during task creation. Patch now uses default pod_owner if not explicitly passed.'
  suggested_fix: Apply default pod_owner on reopen if not explicitly passed. Fix deployed.
  tags:
  - task
  - reopen
  - lifecycle
  status: closed
  timestamp: '2025-05-02T10:51:05.104570'
