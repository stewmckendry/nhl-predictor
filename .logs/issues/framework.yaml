- type: bug
  scope: framework
  task_id: null
  issue_id: 20160501-001
  title: Memory add fails silently if file not present in GitHub
  detail: When using /memory/manage with action=add, the tool returns 200 OK even
    if the target file does not exist in GitHub, leading to downstream failures (update/remove
    fail due to missing entry).
  suggested_fix: Ensure /memory/manage validates file exists on GitHub before returning
    200 OK; fixed by enforcing file check + improved error message.
  tags:
  - memory
  - validation
  - error-handling
  status: closed
  timestamp: '2025-05-02T04:22:44.695866'
- type: bug
  scope: framework
  task_id: null
  issue_id: 20160501-002
  title: Memory index returns misleading message
  detail: /memory/manage with action=index reports 'Memory indexed with X entries'
    regardless of change. In our case, it said 38 entries even though no files existed
    in the specified path.
  suggested_fix: Revised /memory/manage index response to return total and new entries;
    clarified background execution; fixed misleading success message.
  tags:
  - memory
  - usability
  - indexing
  status: closed
  timestamp: '2025-05-02T04:22:50.591529'
- type: bug
  scope: framework
  issue_id: 9f6fd23d-32eb-488f-bf99-cb04a749eebc
  task_id: null
  title: Missing task_id when creating new task
  detail: When using /tasks/lifecycle with action=create, the returned payload did
    not include a task_id if none was explicitly passed. This prevented follow-on
    lifecycle actions. Issue fixed by generating an ID if not provided.
  suggested_fix: Auto-generate a task_id if none is passed during create. Patch now
    ensures task_id is returned.
  tags:
  - task
  - lifecycle
  - id-generation
  status: closed
  timestamp: '2025-05-02T10:42:42.586228'
- type: bug
  scope: framework
  issue_id: f4364dd9-727b-4985-a0a8-f9436de137b1
  task_id: null
  title: Reopen task fails if pod_owner not passed
  detail: 'Calling /tasks/lifecycle with action=reopen on a completed task failed
    with error ''detail: pod_owner''. This occurred even though pod_owner was set
    during task creation. Patch now uses default pod_owner if not explicitly passed.'
  suggested_fix: Apply default pod_owner on reopen if not explicitly passed. Fix deployed.
  tags:
  - task
  - reopen
  - lifecycle
  status: closed
  timestamp: '2025-05-02T10:51:05.104570'
- type: bug
  scope: framework
  issue_id: 3d2ef418-6b79-4b41-b7dd-69beaabe4980
  task_id: null
  title: Missing task_id in task creation
  detail: Calling /tasks/lifecycle with action=create did not return a task_id if
    one wasn't passed, blocking downstream calls. Fixed by patch that generates and
    returns task_id when not supplied.
  suggested_fix: Auto-generate and return task_id if not explicitly passed.
  tags:
  - task
  - create
  - lifecycle
  status: closed
  timestamp: '2025-05-02T11:06:22.459564'
- type: bug
  scope: framework
  issue_id: b835a486-8e5c-44d8-ad01-2893e1c89f7c
  task_id: null
  title: Missing task_id in task creation
  detail: Calling /tasks/lifecycle with action=create did not return a task_id if
    one wasn't passed, blocking downstream calls. Fixed by patch that generates and
    returns task_id when not supplied.
  suggested_fix: Auto-generate and return task_id if not explicitly passed.
  tags:
  - task
  - create
  - lifecycle
  status: closed
  timestamp: '2025-05-02T11:06:27.335212'
- type: bug
  scope: framework
  issue_id: ed4e4df0-b9f5-4437-af39-581cdbb92f50
  task_id: null
  title: Missing task_id in task creation
  detail: Calling /tasks/lifecycle with action=create did not return a task_id if
    one wasn't passed, blocking downstream calls. Fixed by patch that generates and
    returns task_id when not supplied.
  suggested_fix: Auto-generate and return task_id if not explicitly passed.
  tags:
  - task
  - create
  - lifecycle
  status: closed
  timestamp: '2025-05-02T11:07:25.451418'
- type: bug
  scope: framework
  issue_id: 7c0f7685-380b-4925-88b5-b00e8f435bb2
  task_id: null
  title: Reopen fails if pod_owner missing
  detail: Calling /tasks/lifecycle with action=reopen failed when pod_owner wasn't
    passed, despite being set in the task. Fixed by patch using assigned_pod as fallback.
  suggested_fix: Patch now defaults pod_owner from assigned_pod if not explicitly
    passed.
  tags:
  - task
  - reopen
  - lifecycle
  status: closed
  timestamp: '2025-05-02T11:07:33.286416'
- type: enhancement
  scope: framework
  issue_id: 3f299245-ad68-4849-8944-e07988af6ff1
  task_id: null
  title: Auto-generate task_id on create
  detail: Recommend enforcing task_id generation if not provided in create requests.
    This ensures downstream calls like activate/start/complete can proceed without
    error.
  suggested_fix: null
  tags:
  - task
  - create
  - enhancement
  status: open
  timestamp: '2025-05-02T11:07:40.820482'
- type: enhancement
  scope: framework
  issue_id: 9c67acd2-cb46-4448-9018-cab0cbc2dfe2
  task_id: null
  title: Index memory should visibly run in background
  detail: Memory indexing currently runs in the background, but user feedback does
    not indicate it's async. Recommend exposing status or flag to reflect when indexing
    is complete.
  suggested_fix: null
  tags:
  - memory
  - index
  - enhancement
  status: open
  timestamp: '2025-05-02T11:09:16.427686'
- type: enhancement
  scope: framework
  issue_id: baf2201f-44c7-4e0a-9a1c-8257bd5b07b6
  task_id: null
  title: Memory add should return clear error if file is not in GitHub
  detail: Currently /memory/manage with action=add silently fails if the file does
    not exist in GitHub. Enhancement would return a clear error message to users.
  suggested_fix: null
  tags:
  - memory
  - add
  - enhancement
  status: open
  timestamp: '2025-05-02T11:09:24.842000'
- type: bug
  scope: framework
  issue_id: b5ca0bd6-f7fd-4b40-9b1c-b1e91d241edc
  task_id: null
  title: Reasoning metrics returns 0 for scores despite data
  detail: Metrics summary (qualitative) showed 0 recall and novelty rate, and null
    thought quality, even though reasoning_trace.yaml had valid scores. Fixed by scanning
    all task output folders for traces.
  suggested_fix: Patch now recursively walks project/outputs/* folders to collect
    all reasoning traces.
  tags:
  - metrics
  - reasoning
  - bug
  status: closed
  timestamp: '2025-05-02T11:25:27.890180'
- type: bug
  scope: framework
  issue_id: 7ea0a3d9-5620-4bb6-bc6e-3c77f45e2a96
  task_id: null
  title: Reasoning summary fabricated when no data present
  detail: The reasoning_summary text field in /system/metrics was returned even when
    no thoughts existed. This was hallucinated text. Patch now suppresses summary
    when no trace data is found.
  suggested_fix: Reasoning summary is now only generated if thoughts exist. Otherwise
    returns 'No reasoning trace available'.
  tags:
  - metrics
  - summary
  - bug
  status: closed
  timestamp: '2025-05-02T11:25:36.723759'
- type: bug
  scope: framework
  issue_id: 4c63f13c-8a24-4bcd-ace0-7272fef8eb6a
  task_id: null
  title: Metrics export returned no data despite valid reasoning traces
  detail: The /system/metrics export mode returned 0 entries due to missing CSV export
    logic and lack of recursive walk over task outputs. Patch added folder walk and
    output serialization.
  suggested_fix: Implement CSV export handler and output folder traversal to match
    summary logic.
  tags:
  - metrics
  - export
  - bug
  status: closed
  timestamp: '2025-05-02T11:33:35.249871'
- type: bug
  scope: framework
  issue_id: a2e8c26a-19da-4865-b8c5-2adcbf602ac4
  task_id: null
  title: Tool invocation failed for /sandbox/init_branch due to outdated schema and
    ambiguous naming
  detail: 'Initial attempts to call /sandbox/init_branch failed with ''InvalidRecipient''
    despite being listed in the catalog. Likely causes include:

    - Schema for QAPod was outdated until refreshed and updated.

    - The presence of similarly named tools like /project/init_project and tool errors
    misled the diagnosis.

    - Tool path was listed but lacked an invocable identifier, preventing actual calls.


    After updating schema and enabling ''initSandboxBranch'', the tool worked.


    This can block users from testing sandbox features and should be fixed with clearer
    naming, consistent callable names, and schema auto-refresh or error hints.'
  suggested_fix: '1. Ensure all tools listed in the catalog are invocable.

    2. Add schema auto-refresh or hint users to refresh after backend changes.

    3. Use consistent naming patterns for tool identifiers vs. paths (e.g., initSandboxBranch
    for /sandbox/init_branch).

    4. Consider aliasing common endpoint patterns to prevent confusion (e.g., ''sandbox/init''
    as alias to ''initSandboxBranch'').'
  tags:
  - tooling
  - sandbox
  - usability
  - schema-refresh
  status: open
  timestamp: '2025-05-02T18:32:45.604519'
- type: bug
  scope: framework
  issue_id: b179deab-ce33-4f7a-8aff-e03431529540
  task_id: null
  title: ResponseTooLargeError when querying full memory index
  detail: 'Calling `/memory/query` in `list` mode without filters results in a ResponseTooLargeError,
    blocking attempts to validate full memory indexing.


    This is a regression for projects with deep memory footprints or complex directory
    structures.'
  suggested_fix: '1. Add pagination or response truncation for /memory/query

    2. Default to returning counts with a follow-up query option

    3. Allow tag or path filters to scope down result set'
  tags:
  - memory
  - query
  - pagination
  - usability
  status: open
  timestamp: '2025-05-02T19:04:20.010114'
- type: bug
  scope: framework
  issue_id: 58857d9c-5312-4b38-82af-a43a367dfc14
  task_id: null
  title: /system/metrics export mode fails with branch param
  detail: 'Calling `/system/metrics` with `mode: export` and a valid branch (e.g.,
    `sandbox-ancient-eagle`) triggers a 500 Internal Server Error.


    This blocks regression testing and CSV export of reasoning traces in branch-specific
    test runs.'
  suggested_fix: '1. Validate `branch` handling logic in export path

    2. Add fallback or error guardrails for empty reasoning traces

    3. Add unit test for export on sandbox branches'
  tags:
  - metrics
  - export
  - regression
  - sandbox
  status: closed
  timestamp: '2025-05-02T19:08:15.306388'
- type: bug
  scope: framework
  issue_id: 25a45ce1-f727-4ad1-8f97-807f87f24013
  task_id: null
  title: ResponseTooLargeError when querying full memory index
  detail: 'Calling `/memory/query` in `list` mode without filters results in a ResponseTooLargeError,
    blocking validation of full memory indexing.


    Regression issue likely caused by repo growth or unbounded default response size.'
  suggested_fix: '1. Add pagination or truncation to response

    2. Default to count + fetch pattern

    3. Allow optional filtering by tag, path, or pod to limit scope'
  tags:
  - memory
  - query
  - pagination
  - response-size
  status: open
  timestamp: '2025-05-02T19:08:24.366692'
